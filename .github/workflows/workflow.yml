name: CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VERSION: 1.8.0

jobs:
  terraform-apply:
    name: Terraform Init, Plan & Apply
    runs-on: ubuntu-latest
    environment:
      name: apply-approval
    outputs:
      ec2_ip: ${{ steps.extract.outputs.ec2_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform/envs/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform/envs/dev
        env:
          TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: terraform/envs/dev
        env:
          TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform apply -auto-approve

      - name: Extract EC2 Public IP
        id: extract
        working-directory: terraform/envs/dev
        run: |
          echo "ec2_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT

  build-deploy:
    name: Build and Deploy Directly on EC2
    runs-on: ubuntu-latest
    needs: terraform-apply

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 Instance ID
        id: get-instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=${{ needs.terraform-apply.outputs.ec2_ip }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "Found instance ID: $INSTANCE_ID"

      - name: Copy Application Files to EC2
        run: |
          # Create a temporary directory for the application files
          mkdir -p ./app-to-deploy
          cp -r ./repo-root/springboot-app/springboot-demo/* ./app-to-deploy/
          
          # Create a tar file
          tar -czf app.tar.gz -C ./app-to-deploy .
          
          # Upload to S3 temporarily
          aws s3 mb s3://springboot-app-deploy-${{ steps.get-instance.outputs.instance_id }} || true
          aws s3 cp app.tar.gz s3://springboot-app-deploy-${{ steps.get-instance.outputs.instance_id }}/
          
          # Download on EC2 and build/run
          aws ssm send-command \
            --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"mkdir -p ~/springboot-app\", \
                                  \"aws s3 cp s3://springboot-app-deploy-${{ steps.get-instance.outputs.instance_id }}/app.tar.gz ~/springboot-app/\", \
                                  \"cd ~/springboot-app && tar -xzf app.tar.gz\", \
                                  \"cd ~/springboot-app && mvn clean package\", \
                                  \"docker stop springboot-app || true\", \
                                  \"docker rm springboot-app || true\", \
                                  \"cd ~/springboot-app && docker build -t springboot-app:latest .\", \
                                  \"docker run -d --name springboot-app -p 8080:8080 springboot-app:latest\", \
                                  \"sleep 5\", \
                                  \"docker ps\", \
                                  \"curl -v http://localhost:8080\"]" \
            --output text

      - name: Cleanup S3 Bucket
        run: |
          aws s3 rm s3://springboot-app-deploy-${{ steps.get-instance.outputs.instance_id }} --recursive
          aws s3 rb s3://springboot-app-deploy-${{ steps.get-instance.outputs.instance_id }}
          
      - name: Print Access URLs
        run: |
          echo "Spring Boot Application: http://${{ needs.terraform-apply.outputs.ec2_ip }}:8080"
          echo "Jenkins: http://${{ needs.terraform-apply.outputs.ec2_ip }}:8090"

  terraform-destroy:
    name: Terraform Destroy (Manual Approval)
    runs-on: ubuntu-latest
    needs: [terraform-apply, build-deploy]
    environment:
      name: destroy-approval

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform/envs/dev
        run: terraform init

      - name: Find and Terminate EC2 Instances
        run: |
          # Find EC2 instances with the project tag
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=springboot-devops" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          
          if [ -n "$INSTANCE_IDS" ]; then
            echo "Terminating instances: $INSTANCE_IDS"
            aws ec2 terminate-instances --instance-ids $INSTANCE_IDS
            
            # Wait for instances to terminate
            echo "Waiting for instances to terminate..."
            aws ec2 wait instance-terminated --instance-ids $INSTANCE_IDS
          else
            echo "No running instances found"
          fi

      - name: Terraform Destroy
        working-directory: terraform/envs/dev
        env:
          TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform destroy -auto-approve
name: CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VERSION: 1.8.0

jobs:
  terraform-apply:
    name: Terraform Init, Plan & Apply
    runs-on: ubuntu-latest
    environment:
      name: apply-approval
    outputs:
      ec2_ip: ${{ steps.extract.outputs.ec2_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform/envs/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform/envs/dev
        env:
          TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: terraform/envs/dev
        env:
          TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform apply -auto-approve

      - name: Extract EC2 Public IP
        id: extract
        working-directory: terraform/envs/dev
        run: |
          echo "ec2_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT

  docker-build-deploy:
    name: Build, Test, Push Docker to ECR & Deploy
    runs-on: ubuntu-latest
    needs: terraform-apply
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Build and Test with Maven
        working-directory: ./repo-root/springboot-app/springboot-demo
        run: mvn clean package

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Public ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and Push Docker Image to Public ECR
        id: build
        run: |
          export TAG=$(date +%s)
          export IMAGE_URI="public.ecr.aws/b1c8y0o0/springboot-demo:$TAG"
          docker build -t $IMAGE_URI \
            -f ./repo-root/springboot-app/springboot-demo/dockerfile \
            ./repo-root/springboot-app/springboot-demo
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 via AWS SSM
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          docker stop springboot-app || true
          docker rm springboot-app || true
          docker pull ${IMAGE_URI}
          docker run -d -p 8080:8080 --name springboot-app ${IMAGE_URI}
          EOL
          
          # Get instance ID from IP address
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=${{ needs.terraform-apply.outputs.ec2_ip }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          
          echo "Found instance ID: $INSTANCE_ID"
          
          # Send command via SSM
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"docker stop springboot-app || true\", \"docker rm springboot-app || true\", \"docker pull ${IMAGE_URI}\", \"docker run -d -p 8080:8080 --name springboot-app ${IMAGE_URI}\"]" \
            --output text
        env:
          IMAGE_URI: ${{ steps.build.outputs.image_uri }}

  terraform-destroy:
    name: Terraform Destroy (Manual Approval)
    runs-on: ubuntu-latest
    needs: [terraform-apply, docker-build-deploy]
    environment:
      name: destroy-approval

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform/envs/dev
        run: terraform init

      - name: Terraform Plan Destroy
        working-directory: terraform/envs/dev
        env:
          TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform plan -destroy

      - name: Terraform Destroy
        working-directory: terraform/envs/dev
        env:
          TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform destroy -auto-approve
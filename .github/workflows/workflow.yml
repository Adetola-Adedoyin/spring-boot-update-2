name: CI/CD Pipeline

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VERSION: 1.8.0

jobs:
  terraform-apply:
    name: Terraform Init, Plan & Apply
    runs-on: ubuntu-latest
    environment:
      name: apply-approval
    outputs:
      ec2_ip: ${{ steps.extract.outputs.ec2_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform/envs/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform/envs/dev
        env:
          TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform plan

      - name: Terraform Apply
        working-directory: terraform/envs/dev
        env:
          TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform apply -auto-approve

      - name: Extract EC2 Public IP
        id: extract
        working-directory: terraform/envs/dev
        run: |
          echo "ec2_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT
  docker-build-deploy:
    name: Build, Test, Push Docker to ECR & Deploy
    runs-on: ubuntu-latest
    needs: terraform-apply
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Build and Test with Maven
        working-directory: ./repo-root/springboot-app/springboot-demo
        run: mvn clean package

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Public ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and Push Docker Image to Public ECR
        id: build
        run: |
          export TAG=$(date +%s)
          export IMAGE_URI="public.ecr.aws/b1c8y0o0/springboot-demo:$TAG"
          docker build -t $IMAGE_URI \
            -f ./repo-root/springboot-app/springboot-demo/dockerfile \
            ./repo-root/springboot-app/springboot-demo
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          mkdir -p ~/.ssh
          
      - name: Deploy to EC2 via SSH
        run: |
          echo "Deploying to ${{ needs.terraform-apply.outputs.ec2_ip }}"
          echo "Using image: ${{ steps.build.outputs.image_uri }}"
          
          # Add host key to known hosts
          ssh-keyscan -H ${{ needs.terraform-apply.outputs.ec2_ip }} >> ~/.ssh/known_hosts
          
          # Deploy via SSH
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ needs.terraform-apply.outputs.ec2_ip }} << 'ENDSSH'
            # Login to ECR
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
            
            # Deploy container
            docker stop springboot-app || true
            docker rm springboot-app || true
            docker pull ${{ steps.build.outputs.image_uri }}
            docker run -d -p 8080:8080 --name springboot-app ${{ steps.build.outputs.image_uri }}
            docker ps -a
          ENDSSH

  terraform-destroy:
    name: Terraform Destroy (Manual Approval)
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: always()
    environment:
      name: destroy-approval

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform/envs/dev
        run: terraform init

      - name: Terminate EC2 Instances First
        run: |
          # Find and terminate EC2 instances with the project tag
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=springboot-devops" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          
          if [ -n "$INSTANCE_IDS" ]; then
            echo "Terminating instances: $INSTANCE_IDS"
            aws ec2 terminate-instances --instance-ids $INSTANCE_IDS
            
            # Wait for instances to terminate
            echo "Waiting for instances to terminate..."
            aws ec2 wait instance-terminated --instance-ids $INSTANCE_IDS
          else
            echo "No running instances found"
          fi

      - name: Terraform Destroy
        working-directory: terraform/envs/dev
        env:
          TF_VAR_ec2_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        run: terraform destroy -auto-approve